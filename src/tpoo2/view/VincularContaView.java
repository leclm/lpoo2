package tpoo2.view;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import tpoo2.controller.ClienteController;
import tpoo2.controller.VincularContaController;
import tpoo2.model.Cliente;
import tpoo2.model.ContaCorrente;
import tpoo2.model.ContaInvestimento;

public class VincularContaView extends javax.swing.JFrame {
    private final ModeloTabelaCliente modelo = new ModeloTabelaCliente();
    
    private final ModeloTabelaContaCorrente modeloContaCorrente = new ModeloTabelaContaCorrente();
    private final ModeloTabelaContaInvestimento modeloContaInvestimento = new ModeloTabelaContaInvestimento();
    
    
    private int linhaClicadaVincularConta = -1;
    
    private int numeroContadorCorrente = 1;
    private int numeroContadorInvestimento = 1;
    
    private final List<ContaCorrente> listaDeContasCorrente = new ArrayList();
    private final List<ContaInvestimento> listaDeContasInvestimento = new ArrayList();
    
    JFrame jFrame = new JFrame();
    /**
     * Creates new form NovoJFrame2
     */
    
    /*
    *** CONSTRUTOR
    */
    public VincularContaView() {
        initComponents();
        tabelaVincularConta.setModel(modelo);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabVincularConta = new javax.swing.JPanel();
        selecioneCliente = new javax.swing.JLabel();
        scroll1 = new javax.swing.JScrollPane();
        tabelaVincularConta = new javax.swing.JTable();
        selecioneTipoConta = new javax.swing.JLabel();
        cbContas = new javax.swing.JComboBox<>();
        label1VincularConta = new javax.swing.JLabel();
        tLabel1VincularConta = new javax.swing.JTextField();
        label2VincularConta = new javax.swing.JLabel();
        tLabel2VincularConta = new javax.swing.JTextField();
        label3VincularConta = new javax.swing.JLabel();
        tLabel3VincularConta = new javax.swing.JTextField();
        incluirConta = new java.awt.Button();
        bVincularConta = new javax.swing.JButton();
        bManipularConta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        selecioneCliente.setText("Selecione um cliente:");

        tabelaVincularConta.setModel(modelo);
        scroll1.setViewportView(tabelaVincularConta);

        selecioneTipoConta.setText("Escolha qual ser√° o tipo de conta do cliente selecionado na tabela:");

        cbContas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Conta Corrente", "Conta Investimento" }));

        incluirConta.setBackground(new java.awt.Color(33, 136, 56));
        incluirConta.setForeground(new java.awt.Color(240, 240, 240));
        incluirConta.setLabel("Incluir");

        bVincularConta.setBackground(new java.awt.Color(33, 136, 56));
        bVincularConta.setForeground(new java.awt.Color(240, 240, 240));
        bVincularConta.setText("Cadastrar Cliente");
        bVincularConta.setAutoscrolls(true);
        bVincularConta.setBorder(null);
        bVincularConta.setMaximumSize(new java.awt.Dimension(92, 20));
        bVincularConta.setMinimumSize(new java.awt.Dimension(92, 20));

        bManipularConta.setBackground(new java.awt.Color(224, 168, 0));
        bManipularConta.setForeground(new java.awt.Color(0, 0, 0));
        bManipularConta.setText("Manipular Conta");
        bManipularConta.setBorder(null);

        javax.swing.GroupLayout tabVincularContaLayout = new javax.swing.GroupLayout(tabVincularConta);
        tabVincularConta.setLayout(tabVincularContaLayout);
        tabVincularContaLayout.setHorizontalGroup(
            tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
            .addGroup(tabVincularContaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabVincularContaLayout.createSequentialGroup()
                        .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selecioneTipoConta)
                            .addComponent(cbContas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tabVincularContaLayout.createSequentialGroup()
                                .addComponent(label1VincularConta)
                                .addGap(18, 18, 18)
                                .addComponent(tLabel1VincularConta))
                            .addGroup(tabVincularContaLayout.createSequentialGroup()
                                .addComponent(label2VincularConta)
                                .addGap(18, 18, 18)
                                .addComponent(tLabel2VincularConta))
                            .addGroup(tabVincularContaLayout.createSequentialGroup()
                                .addComponent(label3VincularConta)
                                .addGap(18, 18, 18)
                                .addComponent(tLabel3VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bManipularConta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bVincularConta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tabVincularContaLayout.createSequentialGroup()
                        .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selecioneCliente)
                            .addComponent(incluirConta, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabVincularContaLayout.setVerticalGroup(
            tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabVincularContaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selecioneCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabVincularContaLayout.createSequentialGroup()
                        .addComponent(selecioneTipoConta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbContas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label1VincularConta)
                            .addComponent(tLabel1VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tabVincularContaLayout.createSequentialGroup()
                        .addComponent(bVincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bManipularConta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label2VincularConta)
                    .addComponent(tLabel2VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabVincularContaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label3VincularConta)
                    .addComponent(tLabel3VincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(incluirConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(tabVincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(tabVincularConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    *** CONTROLLER
    */
    public void setController(VincularContaController controller) {
        incluirConta.addActionListener(e -> controller.InsertConta());
    }
    
    
    /*
    *** INIT
    */
    public void initView() {
        java.awt.EventQueue.invokeLater(() -> this.setVisible(true));
    }
    
    private void esconderComponentesVincularConta() {
        selecioneTipoConta.setVisible(false);
        cbContas.setVisible(false);
        
        label1VincularConta.setText("");
        label2VincularConta.setText("");
        label3VincularConta.setText("");
        
        tLabel1VincularConta.setText("");
        tLabel2VincularConta.setText("");
        tLabel3VincularConta.setText("");
        
        tLabel1VincularConta.setVisible(false);
        tLabel2VincularConta.setVisible(false);
        tLabel3VincularConta.setVisible(false);
        
        incluirConta.setVisible(false);
    }
    
    private void tabVincularContaComponentShown(java.awt.event.ComponentEvent evt) {                                                
        tabelaVincularConta.setModel(modelo);
        List<Cliente> listaDeClientes = modelo.getClientes();
        Collections.sort(listaDeClientes, (o1, o2) -> Integer.toString(o1.getId()).compareTo(Integer.toString(o2.getId())));
        modelo.atualizarTabela(listaDeClientes);
        
        esconderComponentesVincularConta();
    } 
    
    private void tabelaVincularContaMouseClicked(java.awt.event.MouseEvent evt) {                                                 
        //Pega a linha clicada
        linhaClicadaVincularConta = tabelaVincularConta.rowAtPoint(evt.getPoint());
        
        //Pega o cliente da linha clicada
        Cliente cliente = modelo.getCliente(linhaClicadaVincularConta);
        
        
        int verificarContaCorrente = 0;
        for (ContaCorrente conta: listaDeContasCorrente){
            if (conta.getDono() == cliente) {
                verificarContaCorrente = 1;
                break;
            }
        }
        
        int verificarContaInvestimento = 0;
        if (verificarContaCorrente == 0) {
            for (ContaInvestimento conta: listaDeContasInvestimento){
                if (conta.getDono() == cliente) {
                    verificarContaInvestimento = 1;
                    break;
                }
            }
        }
        
        cbContas.removeAllItems();
        cbContas.addItem("Selecione");
        
        if (verificarContaCorrente == 1) {
            cbContas.addItem("Conta Corrente");
        } else if (verificarContaInvestimento == 1) {
            cbContas.addItem("Conta Investimento");
        } else {
            cbContas.addItem("Conta Corrente");
            cbContas.addItem("Conta Investimento");
        }
        
        selecioneTipoConta.setVisible(true);
        cbContas.setVisible(true);
        tabVincularConta.revalidate();
        tabVincularConta.repaint();
    }    
     
    private void cbContasItemStateChanged(java.awt.event.ItemEvent evt) {                                          
        //Pega qual tipo de conta foi escolhida
        if (cbContas.getSelectedItem() != null) {
            String comboConta = cbContas.getSelectedItem().toString();
        
            switch (comboConta) {
                case "Conta Corrente":
                    label1VincularConta.setText("Dep√≥sito inicial (valor em R$):");
                    label2VincularConta.setText("Limite da conta (valor em R$):");
                    label3VincularConta.setText("");

                    tLabel1VincularConta.setVisible(true);
                    tLabel2VincularConta.setVisible(true);
                    tLabel3VincularConta.setVisible(false);
                    
                    incluirConta.setVisible(true);

                    break;
                case "Conta Investimento":
                    label1VincularConta.setText("Montante M√≠nimo (valor em R$):");
                    label2VincularConta.setText("Dep√≥sito M√≠nimo (valor em R$):");
                    label3VincularConta.setText("Dep√≥sito Inicial (valor em R$):");

                    tLabel1VincularConta.setVisible(true);
                    tLabel2VincularConta.setVisible(true);
                    tLabel3VincularConta.setVisible(true);
                    
                    incluirConta.setVisible(true);

                    break;
            }
            
            tabVincularConta.revalidate();
            tabVincularConta.repaint();
        }
    }                                         

    private void incluirContaMouseClicked(java.awt.event.MouseEvent evt) {                                          
        //Pega o cliente da linha clicada
        Cliente cliente = modelo.getCliente(linhaClicadaVincularConta);

        //Pega qual tipo de conta foi escolhida
        String comboConta = cbContas.getSelectedItem().toString();

        switch (comboConta) {
            case "Conta Corrente":
                try {
                    if (!"".equals(tLabel1VincularConta.getText()) && !"".equals(tLabel2VincularConta.getText())) {
                        int numero = numeroContadorCorrente;
                        double valor = Double.parseDouble(tLabel1VincularConta.getText());
                        Cliente dono = cliente;
                        double limiteDaConta = Double.parseDouble(tLabel2VincularConta.getText());

                        ContaCorrente conta = new ContaCorrente(numero, dono, valor, limiteDaConta);
                        listaDeContasCorrente.add(conta);
                        modeloContaCorrente.adicionaContaCorrente(conta);
                        numeroContadorCorrente++;
                        
                        JOptionPane.showMessageDialog(jFrame, "Conta vinculada com sucesso!", 
                            "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                        
                        esconderComponentesVincularConta();
                    } else {
                        JOptionPane.showMessageDialog(jFrame, "Os campos n√£o podem ficar vazios!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch(NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(jFrame, "Os valores nos campos devem ser num√©ricos!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
                
                break;
            case "Conta Investimento":
                try {
                    if (!"".equals(tLabel1VincularConta.getText()) && 
                        !"".equals(tLabel2VincularConta.getText()) && 
                        !"".equals(tLabel3VincularConta.getText())) {
                        
                        int numero = numeroContadorInvestimento;
                        double valor = Double.parseDouble(tLabel3VincularConta.getText());
                        Cliente dono = cliente;
                        double depositoMinimo = Double.parseDouble(tLabel2VincularConta.getText());
                        double montanteMinimo = Double.parseDouble(tLabel1VincularConta.getText());
                        
                        if (valor >= montanteMinimo && valor >= depositoMinimo) {
                            
                            ContaInvestimento conta = new ContaInvestimento(numero, dono, valor, depositoMinimo, montanteMinimo);
                            listaDeContasInvestimento.add(conta);
                            modeloContaInvestimento.adicionaContaInvestimento(conta);
                            numeroContadorInvestimento++;

                            JOptionPane.showMessageDialog(jFrame, "Conta vinculada com sucesso!", 
                                "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                            
                            esconderComponentesVincularConta();
                        } else {
                            JOptionPane.showMessageDialog(jFrame, "O dep√≥sito inicial n√£o pode ser menor que o montante m√≠nimo"
                                    + " ou que o dep√≥sito m√≠nimo", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(jFrame, "Os campos n√£o podem ficar vazios!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } catch(NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(jFrame, "Os valores nos campos devem ser num√©ricos!", 
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
                
                break;
        }
    }    
     
     
     
     
     
     
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VincularContaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VincularContaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VincularContaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VincularContaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VincularContaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bManipularConta;
    private javax.swing.JButton bVincularConta;
    private javax.swing.JComboBox<String> cbContas;
    private java.awt.Button incluirConta;
    private javax.swing.JLabel label1VincularConta;
    private javax.swing.JLabel label2VincularConta;
    private javax.swing.JLabel label3VincularConta;
    private javax.swing.JScrollPane scroll1;
    private javax.swing.JLabel selecioneCliente;
    private javax.swing.JLabel selecioneTipoConta;
    private javax.swing.JTextField tLabel1VincularConta;
    private javax.swing.JTextField tLabel2VincularConta;
    private javax.swing.JTextField tLabel3VincularConta;
    private javax.swing.JPanel tabVincularConta;
    private javax.swing.JTable tabelaVincularConta;
    // End of variables declaration//GEN-END:variables
}
